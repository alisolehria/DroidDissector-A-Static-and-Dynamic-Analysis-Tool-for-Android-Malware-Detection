import os 
import logging
import sys, traceback, threading
from datetime import datetime
import subprocess
import signal
import threading
from androguard.core.bytecodes import apk
import time
import frida
import psutil
apiFile = ""



def build_monitor_script(dir, topdown = True):
    script = open("android-trace.js").read()
    return script 


def on_message(message, data):
    #print(message)
    with open(apiFile,"a",encoding="utf-8") as file:
        file.write(str(message))


def startAnalysis(fileName,apkName):
    try:
        #=========globals=========

        avdName = os.getenv("AVD_NAME")
        snapshotName = os.getenv("SNAPSHOT_NAME")
        inputFolder = os.getenv("APK_FOLDER")
        outputFolder = os.getenv("DYNAMIC_OUTPUT")
        monkeyEvents = os.getenv("MONKEY_EVENTS")

        global apiFile
        apiFile = os.path.join(outputFolder,"apicalls"+fileName)

        #=========start log=========
        
        startTime = datetime.now().strftime('%H:%M:%S %d-%m-%Y')
        startTimeDifference = datetime.now()

        print("===============Starting Scan at: "+startTime+"===============")
        #logging.info("===============Starting Scan at: "+startTime+"===============")


        #=========api monitor list=========
        apiList = []
        with open("apilist.txt","r") as file:
            for line in file.readlines():
                apiList.append(line.strip("\n"))

        #=========run the emulator=========

        networkFolder = os.path.join(+outputFolder,'network',fileName)

        avdCommand = 'emulator -port 5554 -avd '+avdName+' -snapshot '+snapshotName+ ' -no-window -tcpdump "'+networkFolder+'.cap"'


        avdProcess = subprocess.Popen(avdCommand,shell=True,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)     
        


        #=========adb run=========
        try:
            print("Waiting for device to boot....")
            wait1 = subprocess.Popen("adb -s emulator-5554 wait-for-device",shell=True)
            wait1.wait(timeout=60)
            rootDevice = subprocess.Popen("adb -s emulator-5554 root")
            rootDevice.wait(timeout=60)
            wait2 = subprocess.Popen("adb -s emulator-5554 wait-for-device")
            wait2.wait(timeout=60)
        except:
            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()   
            return     

        print("Device connected to adb")



     


        #=========run log=========

        logFileProcess = subprocess.Popen("adb -s emulator-5554 shell logcat -f /sdcard/"+fileName,shell=True,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        #time.sleep(3)


        #=========install app=========
        try:
            waitInstall = subprocess.Popen("adb -s emulator-5554 wait-for-device",shell=True)
            waitInstall.wait(timeout=60)                
            install = subprocess.Popen('adb -s emulator-5554 install '+os.path.join(inputFolder,apkName))
            install.wait(timeout=60)
            installCode = install.returncode
            if installCode == 0:
                print("Success")

            else:
                #subprocess.call("Taskkill /IM qemu-system-x86_64.exe /F /T")
                subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
                logFileProcess.terminate()
                subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
                avdProcess.terminate()
                print("Install error")
                return
        except:
            print("Install timeout")
            subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
            logFileProcess.terminate()

            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()

            return



        #=========get package name=========
        a = apk.APK(os.path.join(inputFolder,apkName)) #get app info
        package = a.package #get package name
        
        #subprocess.call("adb shell monkey -p "+package+" 1")


        
        


        #=========run app and api call monitoring=========
        try:
            permissionFrida = subprocess.Popen("""adb -s emulator-5554 shell "chmod 755 /data/local/tmp/frida-server""",shell=True)
            permissionFrida.wait(timeout=60)
        except:
            subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
            logFileProcess.terminate()
            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()
            return
    

        apiProcess = subprocess.Popen("""adb -s emulator-5554 shell "/data/local/tmp/frida-server &""")
        #input("press noew")
        pid = None
        device = None
        session = None
        connected = False

        while connected == False:
            try:
                wait3 = subprocess.Popen("adb -s emulator-5554 wait-for-device")
                wait3.wait(timeout=60)
            except:
                subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
                logFileProcess.terminate()
                subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
                apiProcess.terminate()
                subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
                avdProcess.terminate()
                return
            try:
                #device = frida.get_usb_device()
                device = frida.get_device("emulator-5554")
                
                print(str(device)+" on "+package)
                
                pid = device.spawn(package)
                connected=True
                session = device.attach(pid)
                
            except Exception as e:
                print("[ERROR]: %s" % str(e))
                if str(e) == "unable to connect to remote frida-server: closed":
                    print("Server Reconnect")
                else:
                    #subprocess.call("Taskkill /IM qemu-system-x86_64.exe /F /T")
                    #subprocess.call("adb -s emulator-5554 reconnect")
                    subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
                    logFileProcess.terminate()
                    subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
                    apiProcess.terminate()
                    subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
                    avdProcess.terminate()

                    return

                        


        
        print("Succesfully Attached to app")
        script_dir = os.path.join(".")
        script_content = build_monitor_script(script_dir)
        script = session.create_script(script_content)  
        #print(script)

        script.on("message", on_message)
        script.load()
        script.post({'type': 'tag2', 'payload': apiList})

        device.resume(pid)
        
        time.sleep(5)
        try:
            getPID = subprocess.Popen("adb -s emulator-5554 shell pidof "+str(package),stdout=subprocess.PIPE,shell=True)
            getPID.wait(timeout=60)
            out, err = getPID.communicate()
            out = out.decode("utf-8")
            try:
                out = out.rstrip("\n")
            except:
                None
            if out == "":

                startAgain = subprocess.Popen("adb -s emulator-5554 shell monkey -p "+package+" 1")
                startAgain.wait(timeout=60)
                time.sleep(2)
                getPID = subprocess.Popen("adb -s emulator-5554 shell pidof "+str(package),stdout=subprocess.PIPE,shell=True)
                getPID.wait(timeout=60)
                out, err = getPID.communicate()
                out = out.decode("utf-8")
                out = out.rstrip("\n")
                pid = out
                print("Started Again!")
        except:
            subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
            logFileProcess.terminate()
            subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
            apiProcess.terminate()
            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()

            return        

        #=========start strace=========

        # packagePID = subprocess.getstatusoutput('''adb shell ps | for /f "tokens=2" %f in ('findstr /R /S /I /M /C:"'''+package+'''"') do @echo %f''') #getPackage PID
        # packagePID = packagePID[1].rstrip() #remove newline
        # print(str(packagePID)+" "+str(pid))
        straceCommand = "adb -s emulator-5554 shell strace -p "+str(pid)+" -f -o sdcard/STRACE" #start strace
        straceProcess = subprocess.Popen(straceCommand, shell=True,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


        #=========wait for app to start=========
        fileLoc = os.path.join(inputFolder,apkName)
        fileSize = os.stat(fileLoc).st_size / (1024 * 1024)
        if fileSize <= 10:
            appStart = 10
        elif fileSize <= 21:
            appStart = 20
        elif fileSize <= 31:
            appStart = 30
        else:
            appStart = 40   

        #logging.info("Wait "+str(appStart)+" for app to start.")
        print("Wait "+str(appStart)+" for app to start. File Size: "+str(fileSize))
        time.sleep(appStart)

        #=========run monkey=========
        print("Starting monkey events")
        # os.system("adb shell monkey -p "+package+" "+monkeyEvents)
        try:
            appRun = subprocess.Popen("adb -s emulator-5554 shell monkey --throttle 1000 -p "+package+" "+monkeyEvents,shell=True)
            appRun.wait(timeout=90)
        except:
            print("Timedout monkey")
            #logging.info("Timedout monkey")

    



        #=========save strace=========
        #logging.info("Getting zygote strace File")
        print("getting strace file")
        try:
            systemcallsFolder = os.path.join(outputFolder,'systemcalls',fileName)
            straceLog = subprocess.Popen('adb -s emulator-5554 pull sdcard/STRACE "'+systemcallsFolder+'"',shell=True)
            straceLog.wait(timeout=30)
            #logging.info("Getting package PID")
            print("getting id")
        except Exception as e:
            print("Log timeout")
            subprocess.call("Taskkill /IM "+str(straceProcess.pid)+" /F /T")
            straceProcess.terminate()
            subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
            logFileProcess.terminate()
            subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
            apiProcess.terminate()
            subprocess.call("Taskkill /IM "+str(appRun.pid)+" /F /T")
            appRun.terminate()
            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()
            print("[ERROR]: %s" % str(e))
            subprocess.call("Taskkill /IM "+str(straceLog.pid)+" /F /T")
            straceLog.terminate()

            return





            #=========save log=========
        try:
            print("Pulling log file")
            #logging.info("Pulling log file")
            logcatLog = subprocess.Popen('adb -s emulator-5554 pull sdcard/'+fileName+' "'+outputFolder+'/log/'+fileName+'"')
            logcatLog.wait(timeout=30)
            print("log file saved!")
            #logging.info("log file saved!")
        except Exception as e:
            print("Log timeout")
            subprocess.call("Taskkill /IM "+str(straceProcess.pid)+" /F /T")
            straceProcess.terminate()
            subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
            logFileProcess.terminate()
            subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
            apiProcess.terminate()
            subprocess.call("Taskkill /IM "+str(appRun.pid)+" /F /T")
            appRun.terminate()
            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()
            subprocess.call("Taskkill /IM "+str(straceLog.pid)+" /F /T")
            straceLog.terminate()
            print("[ERROR]: %s" % str(e))
            subprocess.call("Taskkill /IM "+str(logcatLog.pid)+" /F /T")
            logcatLog.terminate()            
            return



        #=========kill processes=========

        
        #subprocess.call("Taskkill /IM qemu-system-x86_64.exe /F /T")
        subprocess.call("Taskkill /IM "+str(straceProcess.pid)+" /F /T")
        straceProcess.terminate()
        subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
        logFileProcess.terminate()
        subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
        apiProcess.terminate()
        subprocess.call("Taskkill /IM "+str(appRun.pid)+" /F /T")
        appRun.terminate()
        subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
        avdProcess.terminate()
        subprocess.call("Taskkill /IM "+str(straceLog.pid)+" /F /T")
        straceLog.terminate()
        subprocess.call("Taskkill /IM "+str(logcatLog.pid)+" /F /T")
        logcatLog.terminate()    
                          

        endTime = datetime.now().strftime('%H:%M:%S %d-%m-%Y')
        print("===============Scan Ended at: "+endTime+"===============\n\n")
        #logging.info("===============Scan Ended at: "+endTime+"===============")
        endTimeDifference = datetime.now()
        totalTime = endTimeDifference - startTimeDifference
        print("Total Scan Time: "+ str(totalTime))		
        #logging.info("Total Scan Time: "+ str(totalTime))
    except Exception as e:
        try:
            subprocess.call("Taskkill /IM "+str(straceProcess.pid)+" /F /T")
            straceProcess.terminate()
        except:
            None
        try:    
            subprocess.call("Taskkill /IM "+str(logFileProcess.pid)+" /F /T")
            logFileProcess.terminate()
        except:
            None
        try:            
            subprocess.call("Taskkill /IM "+str(apiProcess.pid)+" /F /T")
            apiProcess.terminate()
        except:
            None
        try:                    
            subprocess.call("Taskkill /IM "+str(appRun.pid)+" /F /T")
            appRun.terminate()
        except:
            None        
        try:            
            subprocess.call("Taskkill /IM "+str(avdProcess.pid)+" /F /T")
            avdProcess.terminate()
        except:
            None        
        try:        
            subprocess.call("Taskkill /IM "+str(straceLog.pid)+" /F /T")
            straceLog.terminate()
        except:
            None     
        try:               
            subprocess.call("Taskkill /IM "+str(logcatLog.pid)+" /F /T")
            logcatLog.terminate() 
        except: 
            None
        print(e)
    
    
loggingDir = os.getenv("DYNAMIC_LOG")
logging.basicConfig(filename=loggingDir,format='%(asctime)s %(message)s',level=logging.INFO)

#=========create folders=========

directory = os.fsencode(sys.argv[4])
if not os.path.exists(sys.argv[4]+"/systemcalls/"): #if dir not present create
    print("SystemCalls folder not present...Creating Folder")
    logging.info("SystemCalls folder not present...Creating Folder")
    os.makedirs(sys.argv[4]+"/systemcalls/")
    print("Folder Created\n\n")
    logging.info("Folder Created")
if not os.path.exists(sys.argv[4]+"/log/"): #if dir not present create
    print("log folder not present...Creating Folder")
    logging.info("log folder not present...Creating Folder")
    os.makedirs(sys.argv[4]+"/log/")
    print("Folder Created\n\n")
    logging.info("Folder Created")
if not os.path.exists(sys.argv[4]+"/network/"): #if dir not present create
    print("Network folder not present...Creating Folder")
    logging.info("Network folder not present...Creating Folder")
    os.makedirs(sys.argv[4]+"/network/")
    print("Folder Created\n\n")
    logging.info("Folder Created")
if not os.path.exists(sys.argv[4]+"/apicalls/"): #if dir not present create
    print("API folder not present...Creating Folder")
    logging.info("API folder not present...Creating Folder")
    os.makedirs(sys.argv[4]+"/apicalls/")
    print("Folder Created\n\n")
    logging.info("Folder Created")

apkListFile = sys.argv[6]
completedList = []
with open("completed.txt","r") as completed:
    for line in completed.readlines():
        completedList.append(line.strip("\n"))
with open(apkListFile,"r") as fullList:
    for apkFile in fullList.readlines():
        apkName = apkFile.strip("\n")
        apkName = apkName+".apk"
        if apkName not in completedList and apkName.endswith(".apk"):
            if apkName.endswith("(1).apk"):
                print(apkName)
                with open("completed.txt","a") as completed:
                    completed.write(apkName+"\n")
                    completedList.append(apkName)
            else:
                print("Starting Dynamic Analysis for: "+apkName)
                logging.info("Starting Dynamic Analysis for: "+apkName)
                fileName = apkName[:-3]
                try:
                    fileName = fileName.replace(" ", "_")
                except:
                    None
                startAnalysis(fileName,apkName)
                with open("completed.txt","a") as completed:
                    completed.write(apkName+"\n")
                    completedList.append(apkName)
                logging.info("Completed analysis of: "+str(len(completedList)))
                print("Completed analysis of: "+str(len(completedList)))
                subprocess.call("adb disconnect")
                time.sleep(5)
                #break



