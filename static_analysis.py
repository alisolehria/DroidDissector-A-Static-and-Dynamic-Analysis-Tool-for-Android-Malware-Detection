from tool.extract_smali import get_smali_features
import subprocess
from subprocess import Popen, PIPE
import shutil
import os
import logging
import time
from datetime import datetime
import sys
from importlib import reload
from dotenv import load_dotenv
from tool.opcodes.extract_opcode_seq_tool import process_opcodes

def run_analysis():
    load_dotenv()


    reload(logging)


    logging.basicConfig(filename="static_1.log",format='%(asctime)s %(message)s',level=logging.DEBUG)


    startTime = datetime.now().strftime('%H:%M:%S %d-%m-%Y')
    startTimeDifference = datetime.now()
    print("===============Starting Script at: "+startTime+"===============")
    logging.info("===============Starting Script at: "+startTime+"===============")


    #path to apk files
    path = os.getenv("APK_FOLDER")
    if not os.path.exists(path):
        os.makedirs(path)
    if not os.path.exists("tmp"):
        os.makedirs("tmp")

    api_list = []
    with open ("tool/api_list.txt","r") as f:
        for line in f.readlines():
            api_list.append(line.strip())



    #check dir of analysis folder
    completed = []

    analysis_dir = os.getenv("ANALYSIS_OUTPUT")
    if not os.path.exists(analysis_dir):
        os.makedirs(analysis_dir)

    opcodes_dir = os.getenv("OPCODES_OUTPUT")
    if not os.path.exists(opcodes_dir):
        os.makedirs(opcodes_dir)

    cfg_dir = os.getenv("CFG_OUTPUT")
    if not os.path.exists(cfg_dir):
        os.makedirs(cfg_dir)

    for root, dirs, files in os.walk(analysis_dir):
        for filename in files:
                completed.append(filename)


    #open list file
    apk_list = []


    for file in os.listdir(path):
            apk_list.append(file.strip())


    to_analyse = len(apk_list)
    analysis_complete = len(completed)


    for apk in apk_list:

        analysis_name = apk[:-4]
        analysis_start = datetime.now()
        apkname= analysis_name
        apkfile = os.path.join(path,apk)
        tmpFolder = os.path.join("tmp",apkname)
        apktoolcommand = "apktool d "+apkfile+" -o "+tmpFolder

        p = Popen(apktoolcommand, stdin=PIPE, shell=True)
        #p = Popen(["apktool"], stdin=PIPE, shell=True)
        p.communicate(input=b'\n')
        #print(analysis_name)
        if analysis_name not in completed:

            # analysis_start = datetime.now()
            

            #print(apkfile)

            apkname= analysis_name
        
            #subprocess.call(["apktool d "+apkfile+" -o tmp\\"+apkname])
            #subprocess.call("apktool",shell=True)


            #print("Code Generated")
            
            try:
                used_permission, network_address, suspicious_apicall, restricted_apicall, api_30, required_permissions, hardware_components, intents, components = get_smali_features("tmp\\"+apkname,api_list,apkfile)


                with open(os.path.join(analysis_dir,analysis_name), 'w',encoding="utf8", errors='ignore') as f:
                    for p in required_permissions:
                        f.write('RequiredPermission::' + str(p) + '\n')
                    for p in hardware_components:
                        f.write('HardwareComponent::' + str(p) + '\n')
                    for p in intents:
                        f.write('Intent::' + str(p) + '\n')

                    kind_name = ['Activity::', 'Service::', 'ContentProvider::', 'BroadcastReceiver::']
                    kind = [r'activity', r'service', r'provider', r'receiver']
                    for index, item in enumerate(kind):
                        for p in components[item]:
                            f.write(str(kind_name[index]) + str(p) + '\n')

                    for p in used_permission:
                        f.write('UsedPermission::' + str(p) + '\n')
                    for p in network_address:
                        f.write('NetAddress::' + str(p) + '\n')
                    for p in suspicious_apicall:
                        f.write('SuspiciousAPI::' + str(p) + '\n')
                    for p in restricted_apicall:
                        f.write('RestrictedAPI::' + str(p) + '\n')
                    for p in api_30:
                        f.write('API30::'+ str(p) + '\n')
            except Exception as e:
                print("HERE")
                print(e)
            completed.append(analysis_name)
            analysis_end = datetime.now()
            analysis_time = analysis_end - analysis_start
            print("This analysis took: "+ str(analysis_time))     
            logging.info("This analysis took: "+ str(analysis_time))  
        else:
            logging.info("Analysis already done for: "+str(analysis_name))
            print("Analysis already done for: "+str(analysis_name))


        ##########OPCODES ANALYSIS##########
        print("Starting opcodes analysis")     
        logging.info("Starting opcodes analysis") 

        process_opcodes(path,apk,opcodes_dir,tmpFolder)
        analysis_end = datetime.now()
        analysis_time = analysis_end - analysis_start
        print("Opcodes analysis took: "+ str(analysis_time))     
        logging.info("Opcodes analysis took: "+ str(analysis_time)) 

        shutil.rmtree(tmpFolder)


    endTime = datetime.now().strftime('%H:%M:%S %d-%m-%Y')
    print("===============Script Ended at: "+endTime+"===============\n\n")
    logging.info("===============Script Ended at: "+endTime+"===============")
    endTimeDifference = datetime.now()
    totalTime = endTimeDifference - startTimeDifference
    print("Total Time Taken: "+ str(totalTime))     
    logging.info("Total Time Taken: "+ str(totalTime))  

    
    ##########CFG ANALYSIS##########
    print("Starting CFG analysis")     
    logging.info("Starting CFG analysis") 
    analysis_start = datetime.now()     
    apktoolcommand = "java -jar CFG.jar "+path+ " "+cfg_dir+" "+os.getenv("ANDROID_PLATFORMS")

    p = Popen(apktoolcommand, stdin=PIPE, shell=True)
    #p = Popen(["apktool"], stdin=PIPE, shell=True)
    p.communicate(input=b'\n')
    analysis_end = datetime.now()
    analysis_time = analysis_end - analysis_start
    print("CFG analysis took: "+ str(analysis_time))     
    logging.info("CFG analysis took: "+ str(analysis_time)) 
    shutil.rmtree(tmpFolder)


try:
    run_analysis()
except:
    print("PLEASE MAKE SURE YOU HAVE CREATED .env FILE")
