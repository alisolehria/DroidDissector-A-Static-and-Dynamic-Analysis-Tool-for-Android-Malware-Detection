import os
import re
import tool.PScount.PScoutMapping as PScoutMapping
import tool.extract_manifest
from lxml.etree import tostring
from pyaxmlparser import APK
import signal


PMap = PScoutMapping.PScoutMapping()

    # features

def list_dir(rootDir,network_address, used_permission, suspicious_apicall, restricted_apicall,api_30,required_permissions,complete_api ):
    file_list = os.listdir(rootDir)
    for index, item in enumerate(file_list):
        path = os.path.join(rootDir, file_list[index])
        if os.path.isfile(path):
            current_network_address, current_used_permission, current_suspicious_apicall, current_restricted_apicall,current_api_30 = start_analysis(path,required_permissions,complete_api)
            network_address.update(current_network_address)
            used_permission.update(current_used_permission)
            suspicious_apicall.update(current_suspicious_apicall)
            restricted_apicall.update(current_restricted_apicall)
            api_30.update(current_api_30)
        else:
            list_dir(path,network_address, used_permission, suspicious_apicall, restricted_apicall,api_30,required_permissions,complete_api)

    return network_address, used_permission, suspicious_apicall, restricted_apicall,api_30

def start_analysis(path,required_permissions,complete_api):
    with open(path, 'r',encoding="utf8", errors='ignore') as f:
        dex_code = f.readlines()
    network_address = get_network_Features(dex_code)

    api_call, suspicious_apicall,api_30 = get_APIs(dex_code,complete_api)

    used_permission, restricted_apicall = get_permissions_api_map(api_call, PMap,required_permissions)
    return network_address, used_permission, suspicious_apicall, restricted_apicall,api_30


def get_network_Features(dex_code):
    URLDomainSet = []
    # network feature
    for line in dex_code:

        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        ip_pattern = r'\d+\.\d+\.\d+\.\d+'
        # IP
        item = re.search(ip_pattern, line.strip('\n'))
        if item:
            span = item.span()
            domain = item.string[span[0]:span[1]]
            URLDomainSet.append(domain)
        # URL
        item = re.search(url_pattern, line.strip('\n'))
        if item:
            URL = item.group()
            domain = re.sub("http[s]?://(.*)", "\g<1>",
                            re.search("http[s]?://([^/:\\\\]*)", URL, re.IGNORECASE).group(), 0, re.IGNORECASE)
            if not re.search('schemas\.android\.com', domain):
                URLDomainSet.append(domain)
    return URLDomainSet

def get_permissions_api_map(apiList, PMap, required_permissions):

    permissionSet = set()
    restrictedApiSet = set()

    # SuspiciousApiSet=set()
    for api in apiList:
        apiClass = api['ApiClass'].replace("/", ".").replace("Landroid", "android").strip()
    
        permission = PMap.GetPermFromApi(apiClass, api['ApiName'])

        if permission != None:
            if permission in required_permissions:

                permissionSet.add(permission)
            else:
                restrictedApiSet.add(apiClass + "." + api["ApiName"])

    return permissionSet, restrictedApiSet

def get_APIs(dalvikCodeList,complete_api):

    dalvikCodeList = set(dalvikCodeList)
    apiList = []
    api_30 = set()
    suspiciousApiSet = set()
    androidAPI30List = list(complete_api)
    androidSuspiciousApiNameList = ["getExternalStorageDirectory", "getSimCountryIso", "execHttpRequest",
                                    "sendTextMessage", "getSubscriberId", "getDeviceId", "getPackageInfo",
                                    "getSystemService", "getWifiState",
                                    "setWifiEnabled", "setWifiDisabled", "Cipher"]
    otherSuspiciousApiNameList = ["Ljava/net/HttpURLconnection;->setRequestMethod(Ljava/lang/String;)",
                                    "Ljava/net/HttpURLconnection",
                                    "Lorg/apache/http/client/methods/HttpPost",
                                    "Landroid/telephony/SmsMessage;->getMessageBody",
                                    "Ljava/io/IOException;->printStackTrace", "Ljava/lang/Runtime;->exec"]
    notLikeApiNameList = ["system/bin/su", "android/os/Exec"]
    bolprint = False
    for dalvikCode in dalvikCodeList:
        if "invoke-" in dalvikCode:
            parts = dalvikCode.split(",")
            for part in parts:
                FullPart = part
                if ";->" in part:
                    part = part.strip()
                    if part.startswith('Landroid'):
                        fullApi = part
                        apiParts = fullApi.split(";->")
                        apiClass = apiParts[0].strip()
                        apiName = apiParts[1].split("(")[0].strip()
                        apiDetails = {}
                        apiDetails['FullApi'] = fullApi
                        apiDetails['ApiClass'] = apiClass
                        apiDetails['ApiName'] = apiName
                        apiList.append(apiDetails)
                        
                        if apiName in androidSuspiciousApiNameList:
                            #print("Android: "+FullPart)
                            suspiciousApiSet.add(apiClass + "." + apiName)

                for element in otherSuspiciousApiNameList:
                    if element in part:
                        #print("Fond JAVA API: "+part)
                        suspiciousApiSet.add(Element)
                for Element in androidAPI30List:
                    if Element in part:
                        api_30.add(part)

   
        for element in notLikeApiNameList:
            if element in dalvikCode:
                suspiciousApiSet.add(Element)
        bolprint = False

    return apiList, suspiciousApiSet,api_30





def get_smali_features(rootDir,api_list,apkfile):


    apk = APK(apkfile)
    axml = apk.xml['AndroidManifest.xml']
    axml = tostring(axml)

    print("Got manifest")
    required_permissions, hardware_components, intents, activities = tool.extract_manifest.get_manifest_fetures(axml,apkfile)

    network_address = set()
    used_permission = set()
    suspicious_apicall = set()
    restricted_apicall = set()
    required_permissions = required_permissions
    api_30 = set()
    
    complete_api = set(api_list)


    network_address, used_permission, suspicious_apicall, restricted_apicall,api_30= list_dir(rootDir,network_address, used_permission, suspicious_apicall, restricted_apicall,api_30,required_permissions,complete_api)



    return used_permission, network_address, suspicious_apicall, restricted_apicall, api_30, required_permissions, hardware_components, intents, activities

