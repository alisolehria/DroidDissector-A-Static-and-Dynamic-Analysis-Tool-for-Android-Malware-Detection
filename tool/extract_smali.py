#inspired from https://github.com/KqSMea8/Drebin/blob/c71a2bce9af0549c7e24572e27fd12b12f07e1de/smali_features.py
import os
import re
import tool.PScount.PScoutMapping as PScoutMapping
import tool.extract_manifest
from lxml.etree import tostring
from pyaxmlparser import APK
import signal


PMap = PScoutMapping.PScoutMapping()

    # features

def list_dir(rootDir,network_address, used_permission, suspicious_apicall, restricted_apicall,api_30,required_permissions,complete_api ):
    file_list = os.listdir(rootDir)
    for index, item in enumerate(file_list):
        path = os.path.join(rootDir, file_list[index])
        if os.path.isfile(path):
            current_network_address, current_used_permission, current_suspicious_apicall, current_restricted_apicall,current_api_30 = start_analysis(path,required_permissions,complete_api)
            network_address.update(current_network_address)
            used_permission.update(current_used_permission)
            suspicious_apicall.update(current_suspicious_apicall)
            restricted_apicall.update(current_restricted_apicall)
            api_30.update(current_api_30)
        else:
            list_dir(path,network_address, used_permission, suspicious_apicall, restricted_apicall,api_30,required_permissions,complete_api)

    return network_address, used_permission, suspicious_apicall, restricted_apicall,api_30

def start_analysis(path,required_permissions,complete_api):
    with open(path, 'r',encoding="utf8", errors='ignore') as f:
        dex_code = f.readlines()
    network_address = extract_network_features(dex_code)

    api_call, suspicious_apicall,api_30 = extract_apis(dex_code,complete_api)

    used_permission, restricted_apicall = get_permissions_api_map(api_call, PMap,required_permissions)
    return network_address, used_permission, suspicious_apicall, restricted_apicall,api_30


def extract_network_features(dex_code):
    url_domain_set = []
    
    # Network feature
    for line in dex_code:
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        ip_pattern = r'\d+\.\d+\.\d+\.\d+'
        
        # IP
        ip_match = re.search(ip_pattern, line.strip('\n'))
        if ip_match:
            ip_span = ip_match.span()
            domain = ip_match.string[ip_span[0]:ip_span[1]]
            url_domain_set.append(domain)
        
        # URL
        url_match = re.search(url_pattern, line.strip('\n'))
        if url_match:
            url = url_match.group()
            domain = re.sub(r'http[s]?://(.*)', r'\g<1>',
                            re.search(r'http[s]?://([^/:\\\\]*)', url, re.IGNORECASE).group(), 0, re.IGNORECASE)
            if not re.search(r'schemas\.android\.com', domain):
                url_domain_set.append(domain)
    
    return url_domain_set


def get_permissions_api_map(apiList, PMap, required_permissions):

    permissionSet = set()
    restrictedApiSet = set()

    # SuspiciousApiSet=set()
    for api in apiList:
        apiClass = api['ApiClass'].replace("/", ".").replace("Landroid", "android").strip()
    
        permission = PMap.GetPermFromApi(apiClass, api['ApiName'])

        if permission != None:
            if permission in required_permissions:

                permissionSet.add(permission)
            else:
                restrictedApiSet.add(apiClass + "." + api["ApiName"])

    return permissionSet, restrictedApiSet

def extract_apis(dalvik_code_list, complete_api):

    dalvik_code_set = set(dalvik_code_list)
    api_list = []
    api_30 = set()
    suspicious_api_set = set()
    android_api_30_list = list(complete_api)
    android_suspicious_api_name_list = [
        "getExternalStorageDirectory", "getSimCountryIso", "execHttpRequest",
        "sendTextMessage", "getSubscriberId", "getDeviceId", "getPackageInfo",
        "getSystemService", "getWifiState",
        "setWifiEnabled", "setWifiDisabled", "Cipher"
    ]
    other_suspicious_api_name_list = [
        "Ljava/net/HttpURLconnection;->setRequestMethod(Ljava/lang/String;)",
        "Ljava/net/HttpURLconnection",
        "Lorg/apache/http/client/methods/HttpPost",
        "Landroid/telephony/SmsMessage;->getMessageBody",
        "Ljava/io/IOException;->printStackTrace", "Ljava/lang/Runtime;->exec"
    ]
    not_like_api_name_list = ["system/bin/su", "android/os/Exec"]
    should_print = False

    for dalvik_code in dalvik_code_set:
        if "invoke-" in dalvik_code:
            parts = dalvik_code.split(",")
            for part in parts:
                full_part = part
                if ";->" in part:
                    part = part.strip()
                    if part.startswith('Landroid'):
                        full_api = part
                        api_parts = full_api.split(";->")
                        api_class = api_parts[0].strip()
                        api_name = api_parts[1].split("(")[0].strip()
                        api_details = {}
                        api_details['FullApi'] = full_api
                        api_details['ApiClass'] = api_class
                        api_details['ApiName'] = api_name
                        api_list.append(api_details)

                        if api_name in android_suspicious_api_name_list:
                            suspicious_api_set.add(api_class + "." + api_name)

                for element in other_suspicious_api_name_list:
                    if element in part:
                        suspicious_api_set.add(element)

                for element in android_api_30_list:
                    if element in part:
                        api_30.add(part)

        for element in not_like_api_name_list:
            if element in dalvik_code:
                suspicious_api_set.add(element)
        should_print = False

    return api_list, suspicious_api_set, api_30






def get_smali_features(rootDir,api_list,apkfile):


    apk = APK(apkfile)
    axml = apk.xml['AndroidManifest.xml']
    axml = tostring(axml)

    print("Got manifest")
    required_permissions, hardware_components, intents, activities = tool.extract_manifest.get_manifest_fetures(axml,apkfile)

    network_address = set()
    used_permission = set()
    suspicious_apicall = set()
    restricted_apicall = set()
    required_permissions = required_permissions
    api_30 = set()
    
    complete_api = set(api_list)


    network_address, used_permission, suspicious_apicall, restricted_apicall,api_30= list_dir(rootDir,network_address, used_permission, suspicious_apicall, restricted_apicall,api_30,required_permissions,complete_api)



    return used_permission, network_address, suspicious_apicall, restricted_apicall, api_30, required_permissions, hardware_components, intents, activities

