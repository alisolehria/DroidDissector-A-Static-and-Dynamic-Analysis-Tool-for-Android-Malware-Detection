#!/usr/bin/env python
import sys
import subprocess
from subprocess import Popen, PIPE
import os
import shutil
from datetime import datetime
import logging
logging.basicConfig(filename="opcodes.log",
                    format='%(asctime)s %(message)s', level=logging.DEBUG)
sys.path.insert(1, os.path.join(sys.path[0], '../..'))

def create_opcode_seq(decoded_dir,opseq_file_directory,apk_hash):

    dalvik_opcodes = {}
    # Reading Davlik opcodes into a dictionary
    with open("tool/OPCODES.txt") as fop:
        for linee in fop:
            (key, val) = linee.split()
            dalvik_opcodes[key] = val
    try:
        smali_dir = os.path.join(decoded_dir)
        if apk_hash.endswith(".apk"):
            apk_hash = apk_hash[:-4]
        opseq_fname=os.path.join(opseq_file_directory,apk_hash+".opseq")

        with open(opseq_fname, "a",encoding="utf8", errors='ignore') as opseq_file:
            #with open("extra.txt","a") as extra_file:
            for root, dirs, fnames in os.walk(smali_dir):
                for fname in fnames:
                    full_path = os.path.join(root, fname)
                    opseq_file.write(get_opcode_seq(full_path, dalvik_opcodes))
                        #extra_file.write(get_opcode_seq(full_path, dalvik_opcodes)[1])
        opseq_file.close()

        return True
    except Exception as e:
        # print "Exception occured during opseq creation of apk " ,apk_hash
        print(e)
        logging.error('Exception occured during opseq creation {0}'.format(str(e)))
        return False

def get_opcode_seq(smali_fname, dalvik_opcodes):
    # Returns opcode sequence created from smali file 'smali_fname'.

    opcode_seq=''
    extra_seq = ''

    with open(smali_fname, mode="r",encoding="utf8", errors='ignore') as bigfile:
        reader = bigfile.read()
        for i, part in enumerate(reader.split(".method")):
            add_newline = False
            if i!=0:
                method_part=part.split(".end method")[0]
                method_body = method_part.strip().split('\n')
                for line in method_body:
                    # print(method_body)
                    if not line.strip().startswith('.') and not line.strip().startswith('#') and line.strip():
                        method_line = line.strip().split()
                        if method_line[0] in dalvik_opcodes:
                            add_newline = True
                            opcode_seq += dalvik_opcodes[method_line[0]]
                            #extra_seq += str(method_line) +":::"
                if  add_newline:
                    opcode_seq += '\n'
                    #extra_seq += '\n'

    return opcode_seq#,extra_seq





def run_opcodes(apk_file_directory,apk_name,opseq_file_directory,decoded_location):


    #-----apks folder----


    startTime = datetime.now().strftime('%H:%M:%S %d-%m-%Y')
    startTimeDifference = datetime.now()
    print("===============Starting Script at: "+startTime+"===============")
    logging.info("===============Starting Script at: "+startTime+"===============")

    #----decode file folder----
    tmp_file_directory = 'tmp'

    #----sequence data----
    if not os.path.exists("./opcodes"):
        os.makedirs("./opcodes")
    

    # Default is not to include smali files in android support libraries unless 4th parameter is provided

    include_libs = False


    #----get filename list-----
    apks = [apk_name]
    # for name in os.listdir(apk_file_directory):
    #     if os.path.isfile(os.path.join(apk_file_directory, name)):
    #         apks.append(name)
    # to_analyse = str(len(os.listdir(apk_file_directory))-1)
    completed = []
    for root, dirs, files in os.walk(opseq_file_directory):
        for filename in files:
            completed.append(filename)
    num_local = 0
    analysis_complete = len(completed)
    # Looping through all apks
    for apk_hash in apks:
        if apk_hash+".opseq" not in completed:
            apk_file_location = os.path.join(apk_file_directory, apk_hash)
            num_local += 1
            analysis_start = datetime.now()

            # Decoding apk into the tmp_file_directory
            #decoded_location = decode_application(apk_file_location,tmp_file_directory,apk_hash,include_libs)

            if (not os.path.exists(decoded_location) or not os.listdir(decoded_location)):
                continue

            result =create_opcode_seq(decoded_location,opseq_file_directory,apk_hash)
            completed.append(apk_hash)
            analysis_end = datetime.now()
            analysis_time = analysis_end - analysis_start
            print("This analysis took: " + str(analysis_time))
            logging.info("This analysis took: " + str(analysis_time))






    endTime = datetime.now().strftime('%H:%M:%S %d-%m-%Y')
    print("===============Script Ended at: "+endTime+"===============\n\n")
    logging.info("===============Script Ended at: "+endTime+"===============")
    endTimeDifference = datetime.now()
    totalTime = endTimeDifference - startTimeDifference
    print("Total Time Taken: " + str(totalTime))
    logging.info("Total Time Taken: " + str(totalTime))


